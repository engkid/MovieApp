//
//  UserReviewsViewController.swift
//  MovieApp
//
//  Created by k1d_dev on 14/08/23.
//  Copyright (c) 2023 k1d_dev. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class UserReviewsViewController: UIViewController {

    // MARK: - Public properties -

    var presenter: UserReviewsPresenterInterface!
    
    // MARK: - Private properties -
    private lazy var collectionView: UICollectionView = {
        let collectionView = UICollectionView(
            frame: .zero,
            collectionViewLayout: self.createLayout()
        )
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        collectionView.delegate = self
        collectionView.backgroundColor = .white
        return collectionView
    }()
    
    private var isLoadingMore = false
    private var hasLoadedInitialData = false
    private var dataSource: UICollectionViewDiffableDataSource<UserReviewSection, UserReviewItem>!

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.addSubview(collectionView)
        self.title = "User Reviews"
        self.setupViews()
        self.configureDataSource()
        
        Task {
            try await presenter.getUserReviews()
        }
        
    }
    
    // MARK: - Private functions
    
    private func setupViews(insets: UIEdgeInsets = .zero) {
        
        collectionView.registerCellWithoutNib(UserReviewCell.self)
        collectionView.registerHeaderWithoutNib(SectionTitleReusableView.self)
        collectionView.registerFooterWithoutNib(LoadingFooterReusableView.self)
        
        NSLayoutConstraint.activate([
            self.collectionView.topAnchor.constraint(equalTo: self.view.topAnchor, constant: insets.top),
            self.collectionView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor, constant: insets.right),
            self.collectionView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor, constant: insets.left),
            self.collectionView.bottomAnchor.constraint(equalTo: self.view.bottomAnchor, constant: insets.bottom)
        ])
        
    }
    
    private func createLayout() -> UICollectionViewCompositionalLayout {
        
        return UICollectionViewCompositionalLayout(sectionProvider: { sectionIndex, _ in
            let sections = UserReviewSection(rawValue: sectionIndex)
            
            switch sections {
            case .userReview:
                let item = NSCollectionLayoutItem(
                    layoutSize: .init(
                        widthDimension: .fractionalWidth(1),
                        heightDimension: .estimated(135)
                    )
                )
                let group = NSCollectionLayoutGroup.vertical(
                    layoutSize: .init(
                        widthDimension: .fractionalWidth(1),
                        heightDimension: .estimated(270)
                    ),
                    subitems: [item]
                )
                
                let section = NSCollectionLayoutSection(group: group)
                section.contentInsets = .init(
                    top: 0,
                    leading: 16,
                    bottom: 0,
                    trailing: 16
                )
                
                let headerSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0), heightDimension: .estimated(44))
                let sectionHeader = NSCollectionLayoutBoundarySupplementaryItem(
                    layoutSize: headerSize,
                    elementKind: UICollectionView.elementKindSectionHeader,
                    alignment: .top
                )
                
                section.boundarySupplementaryItems = [sectionHeader]
                
                return section
            case .none:
                let item = NSCollectionLayoutItem(
                    layoutSize: .init(
                        widthDimension: .fractionalWidth(1),
                        heightDimension: .fractionalHeight(1)
                    )
                )
                let group = NSCollectionLayoutGroup.horizontal(
                    layoutSize: .init(
                        widthDimension: .estimated(1),
                        heightDimension: .estimated(1)
                    ),
                    subitems: [item]
                )
                
                let section = NSCollectionLayoutSection(group: group)
                
                return section
            }
        })
    }

    private func configureDataSource() {
        dataSource = UICollectionViewDiffableDataSource<UserReviewSection, UserReviewItem>(collectionView: collectionView) {(collectionView, indexPath, itemIdentifier) -> UICollectionViewCell? in
            
            switch itemIdentifier.type {
            case .userReviews(let userReview):
                let cell = collectionView.dequeueReusableCell(withClass: UserReviewCell.self, for: indexPath)
                
                cell.configure(cellType: .regular(review: userReview))
                
                return cell
            }
        }
        
        dataSource.supplementaryViewProvider = { collectionView, kind, indexPath in
            
            switch kind {
            case UICollectionView.elementKindSectionHeader:
                let headerView: SectionTitleReusableView = collectionView.dequeueHeader(SectionTitleReusableView.self, indexPath: indexPath)
                headerView.configure(with: "User Reviews")
                return headerView
            case UICollectionView.elementKindSectionFooter:
                let footerView: LoadingFooterReusableView = collectionView.dequeueFooter(LoadingFooterReusableView.self, indexPath: indexPath)
                footerView.configure(isLoading: self.isLoadingMore)
                return footerView
            default:
                return nil
            }
        }
    }
    
}

// MARK: - Extensions -

extension UserReviewsViewController: UserReviewsViewInterface {
    
    func applySnapshot(items: [UserReviewItem]) {
        var snapshot = NSDiffableDataSourceSnapshot<UserReviewSection, UserReviewItem>()
        
        if !hasLoadedInitialData {
            snapshot.appendSections([.userReview])
            hasLoadedInitialData = true
        }
        
        for item in items {
            switch item.type {
            case .userReviews(let review):
                snapshot.appendItems([.init(section: .userReview, type: .userReviews(review))], toSection: .userReview)
            }
        }
        
        dataSource.apply(snapshot, animatingDifferences: true)
    }
    
}

extension UserReviewsViewController: UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        let itemsSection = dataSource.snapshot().itemIdentifiers(inSection: .userReview).count
        
        if indexPath.row == itemsSection - 1 && !isLoadingMore {
            isLoadingMore = true
            presenter.page += 1
            Task {
                try await presenter.getUserReviews()
            }
        }
    }
    
}
