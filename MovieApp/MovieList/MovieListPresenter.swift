//
//  MovieListPresenter.swift
//  MovieApp
//
//  Created by k1d_dev on 11/08/23.
//  Copyright (c) 2023 k1d_dev. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import UIKit

final class MovieListPresenter<View: MovieListViewInterface> {

    var page: Int = 1
    // MARK: - Private properties -

	private weak var view: View?
    private let interactor: MovieListInteractorInterface
    private let wireframe: MovieListWireframeInterface

    // MARK: - Lifecycle -

    init(
        view: View?,
        interactor: MovieListInteractorInterface,
        wireframe: MovieListWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension MovieListPresenter: MovieListPresenterInterface {
    
	func discoverMovie() async throws {
		
		var loadingItems: [MovieListItem] = []
		
		for _ in 0 ... 5 {
			if let loadingItem = MovieListItem(section: .movieList, type: .loading) as? MovieListItem {
				loadingItems.append(loadingItem)
			}
		}
		
		view?.setState(.loading(loadingItems as! View.ItemType))
		
		Task {
			let movieListResult: TMDBApiResult<Movie>? = try? await interactor.discoverMovie(by: interactor.movieId, page: "\(page)")
			
			if let movieListItem = movieListResult?.results.map({ movie in
				MovieListItem(section: .movieList, type: .movieList(movie))
			}) as? View.ItemType {
				view?.setState(.returnedResponse(.success(movieListItem)))
			} else {
				view?.setState(.returnedResponse(.failed("Fetch movies failed")))
			}
		}
	}
    
    func navigate(to destination: MovieListNavigationOption, navigationController: UINavigationController?) {
        switch destination {
        case .movieDetails(let movie):
            wireframe.navigateToMovieDetails(destination: .movieDetails(movie), navigationController)
        }
    }
    
}
