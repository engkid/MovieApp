//
//  MovieListViewController.swift
//  MovieApp
//
//  Created by k1d_dev on 11/08/23.
//  Copyright (c) 2023 k1d_dev. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import SkeletonView

final class MovieListViewController: UIViewController {

    // MARK: - Public properties -

    var presenter: MovieListPresenterInterface!
    
    // MARK: - Private properties -
    private lazy var collectionView: UICollectionView = {
        let collectionView = UICollectionView(
            frame: .zero,
            collectionViewLayout: self.createLayout()
        )
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        collectionView.delegate = self
        collectionView.backgroundColor = .white
        return collectionView
    }()

    private var isLoadingMore = false
    private var hasLoadedInitialData = false
    private var dataSource: UICollectionViewDiffableDataSource<MovieListSection, MovieListItem>!
    
    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        self.title = "Movie List"
        self.view.addSubview(collectionView)
        self.setupViews()
        self.configureDataSource()
        
        Task {
            try await self.presenter.discoverMovie()
        }
    }
    
    private func setupViews(insets: UIEdgeInsets = .zero) {
        
        collectionView.registerCellWithoutNib(MovieListCell.self)
        collectionView.registerFooterWithoutNib(LoadingFooterReusableView.self)
        
        NSLayoutConstraint.activate([
            self.collectionView.topAnchor.constraint(equalTo: self.view.topAnchor, constant: insets.top),
            self.collectionView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor, constant: insets.right),
            self.collectionView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor, constant: insets.left),
            self.collectionView.bottomAnchor.constraint(equalTo: self.view.bottomAnchor, constant: insets.bottom)
        ])
        
    }

    private func createLayout() -> UICollectionViewCompositionalLayout {
        
        let config = UICollectionViewCompositionalLayoutConfiguration()
        config.interSectionSpacing = 16
        
        return UICollectionViewCompositionalLayout(sectionProvider: { sectionIndex, _ in
            let sections = MovieListSection(rawValue: sectionIndex)
            
            switch sections {
            case .movieList:
                
                let item = NSCollectionLayoutItem(
                    layoutSize: .init(
                        widthDimension: .fractionalWidth(0.50),
                        heightDimension: .absolute(350)
                    )
                )
                let group = NSCollectionLayoutGroup.horizontal(
                    layoutSize: .init(
                        widthDimension: .fractionalWidth(1),
                        heightDimension: .estimated(350)
                    ),
                    subitems: [item]
                )
                let section = NSCollectionLayoutSection(group: group)
                section.contentInsets = .init(
                    top: 16,
                    leading: 16,
                    bottom: 20,
                    trailing: 16
                )
                
                let footerSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0), heightDimension: .estimated(44))
                let sectionFooter = NSCollectionLayoutBoundarySupplementaryItem(
                    layoutSize: footerSize,
                    elementKind: UICollectionView.elementKindSectionFooter,
                    alignment: .bottom
                )
                
                section.boundarySupplementaryItems = [sectionFooter]
                
                return section
            case .none:
                let item = NSCollectionLayoutItem(
                    layoutSize: .init(
                        widthDimension: .fractionalWidth(1),
                        heightDimension: .fractionalHeight(1)
                    )
                )
                let group = NSCollectionLayoutGroup.horizontal(
                    layoutSize: .init(
                        widthDimension: .absolute(0),
                        heightDimension: .absolute(0)
                    ),
                    subitems: [item]
                )
                
                let section = NSCollectionLayoutSection(group: group)
                
                return section
            }
        }, configuration: config)
    }
    
    private func configureDataSource() {
        dataSource = UICollectionViewDiffableDataSource<MovieListSection, MovieListItem>(collectionView: collectionView) { (collectionView, indexPath, itemIdentifier) -> UICollectionViewCell? in
            switch itemIdentifier.type {
            case .movieList(let movie):
                let cell = collectionView.dequeueReusableCell(withClass: MovieListCell.self, for: indexPath)
				
				cell.hideShimmer()
				
                cell.configure(model: movie)
                
                return cell
			case .loading:
				let cell = collectionView.dequeueReusableCell(withClass: MovieListCell.self, for: indexPath)
				
				cell.showShimmer()
				
				return cell
            }
        }
        
        dataSource.supplementaryViewProvider = { [weak self] collectionView, kind, indexPath in
            guard let self = self else { return nil }
            switch kind {
            case UICollectionView.elementKindSectionFooter:
                let footerView: LoadingFooterReusableView = collectionView.dequeueFooter(LoadingFooterReusableView.self, indexPath: indexPath)
                footerView.configure(isLoading: self.isLoadingMore)
                return footerView
            default:
                return nil
            }
        }
        
    }
	
	private func updateViewState<T>(state: ViewState<T>) where T: Collection, T.Element == MovieListItem {
		var snapshot = dataSource.snapshot()
		
		if !hasLoadedInitialData {
			snapshot.appendSections([.movieList])
			hasLoadedInitialData = true
		}
		
		switch state {
		case let .loading(items):
			
			guard let items = items as? [MovieListItem] else { return }
			
			snapshot.appendItems(items)
			
			dataSource.apply(snapshot, animatingDifferences: true)
			
			return
		case .returnedResponse(.success(let items)):
			
			guard let items = items as? [MovieListItem] else { return }
			
			snapshot.deleteItems(snapshot.itemIdentifiers.filter { $0.section == .movieList && $0.type == .loading })
			snapshot.appendItems(items)
			
			dataSource.apply(snapshot, animatingDifferences: true)
			
			isLoadingMore = false
			
		default:
			return
		}
		
	}
	
	private func showErrorState(message: String) {
		ThreadManager.runOnMainThread {
			self.showToast(with: message)
		}
	}
    
}

// MARK: - Extensions -

extension MovieListViewController: MovieListViewInterface {
	
	func setState(_ state: ViewState<[MovieListItem]>) {
		updateViewState(state: state)
	}

}

extension MovieListViewController: UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let selectedItem = dataSource.itemIdentifier(for: indexPath)
        if case let .movieList(movie) = selectedItem?.type {
            presenter.navigate(to: .movieDetails(movie), navigationController: self.navigationController)
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        let itemsSection = dataSource.snapshot().itemIdentifiers(inSection: .movieList).count
        
        if indexPath.row == itemsSection - 1 && !isLoadingMore {
            isLoadingMore = true
            presenter.page += 1
            Task {
                try await presenter.discoverMovie()
            }
        }
    }
    
}
